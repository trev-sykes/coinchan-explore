import type { ContractConfig } from '../config.js';
import type { Compute } from '../types.js';
export type EtherscanConfig<chainId extends number> = {
    /**
     * Etherscan API key.
     *
     * Create or manage keys at https://etherscan.io/myapikey
     */
    apiKey: string;
    /**
     * Duration in milliseconds to cache ABIs.
     *
     * @default 1_800_000 // 30m in ms
     */
    cacheDuration?: number | undefined;
    /**
     * Chain ID to use for fetching ABI.
     *
     * If `address` is an object, `chainId` is used to select the address.
     *
     * View supported chains on the [Etherscan docs](https://docs.etherscan.io/etherscan-v2/getting-started/supported-chains).
     */
    chainId: (chainId extends ChainId ? chainId : never) | (ChainId & {});
    /**
     * Contracts to fetch ABIs for.
     */
    contracts: Compute<Omit<ContractConfig<ChainId, chainId>, 'abi'>>[];
    /**
     * Whether to try fetching proxy implementation address of the contract
     *
     * @default false
     */
    tryFetchProxyImplementation?: boolean | undefined;
};
/**
 * Fetches contract ABIs from Etherscan.
 */
export declare function etherscan<chainId extends ChainId>(config: EtherscanConfig<chainId>): {
    contracts: () => import("../types.js").MaybePromise<ContractConfig[]>;
    name: string;
    run?: ((config: {
        contracts: import("../config.js").Contract[];
        isTypeScript: boolean;
        outputs: readonly {
            plugin: Pick<import("../config.js").Plugin, "name">;
            imports?: string;
            prepend?: string;
            content: string;
        }[];
    }) => import("../types.js").MaybePromise<{
        imports?: string;
        prepend?: string;
        content: string;
    }>) | undefined | undefined;
    validate?: (() => import("../types.js").MaybePromise<void>) | undefined | undefined;
    watch?: import("../config.js").Watch | undefined;
};
type ChainId = 1 | 11155111 | 17000 | 560048 | 56 | 97 | 137 | 80002 | 1101 | 2442 | 8453 | 84532 | 42161 | 42170 | 421614 | 59144 | 59141 | 250 | 4002 | 81457 | 168587773 | 10 | 11155420 | 43114 | 43113 | 199 | 1028 | 42220 | 44787 | 25 | 252 | 2522 | 100 | 255 | 2358 | 5000 | 5003 | 1284 | 1285 | 1287 | 204 | 5611 | 534352 | 534351 | 167000 | 167009 | 1111 | 1112 | 324 | 300 | 660279 | 37714555429 | 50 | 51 | 33139 | 33111 | 480 | 4801 | 50104 | 531050104 | 146 | 57054 | 130 | 1301 | 2741 | 11124 | 80094 | 80069 | 1923 | 1924 | 10143;
export {};
//# sourceMappingURL=etherscan.d.ts.map